package resp;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import chat.ChatMessage;

/**
 * Class to store message information Used to serialize messages from to the
 * user
 * 
 * @author bs2113
 * 
 */
public class MessageResponse extends Response {

  // Variables storing the names of the database columns
  private final String FROM_COLUMN = "FROM";
  private final String TO_COLUMN = "TO";
  private final String TIME_COLUMN = "TIME";
  private final String PAYLOAD_COLUMN = "PAYLOAD";
  private final String TYPE_COLUMN = "TYPE";

  // Fields storing information to be serialized
  private String type;
  private int from;
  private int to;
  private String payload;
  private Timestamp timestamp;

  // Fields storing internal information
  private transient ResultSet rs;

  /**
   * Empty constructor for GSON serializing
   */
  public MessageResponse() {
  };

  /**
   * Constructor used within the database interface to construct the query for
   * messages
   * 
   * @param to
   *          The user to get the messages for
   */
  public MessageResponse(int to) {
    this.to = to;
  };

  /**
   * Constructor used to build the message response for storing in the database,
   * the time is generated by the database so is not needed here
   * 
   * @param type
   *          Type of the message (message data). Allows for custom datatypes to
   *          be sent.
   * @param from
   *          User ID of the sender
   * @param to
   *          User ID of the recipient
   * @param payload
   *          The data of the message
   */
  public MessageResponse(String type, int from, int to, String payload) {
    this.type = type;
    this.from = from;
    this.to = to;
    this.payload = payload;
  }

  /*
   * (non-Javadoc)
   * 
   * @see resp.Response#getSQLInsert()
   */
  @Override
  public String getSQLInsert() {
    // Params, 1st - from id, 2nd - to id, 3rd - payload, 4th - type.
    return String.format(
        "INSERT INTO \"MESSAGE\" VALUES (%s, ?, ?, %s, ?, ?);", "DEFAULT",
        "DEFAULT");
  }

  /*
   * (non-Javadoc)
   * 
   * @see resp.Response#formatSQLInsert(java.sql.PreparedStatement)
   */
  @Override
  public void formatSQLInsert(PreparedStatement prepared) throws SQLException {
    int i = 1;
    prepared.setInt(i++, from);
    prepared.setInt(i++, to);
    prepared.setString(i++, escape(payload));
    prepared.setString(i++, escape(type));
  }

  /*
   * (non-Javadoc)
   * 
   * @see resp.Response#getSQLQuery()
   */
  @Override
  public String getSQLQuery() {
    return String
        .format(
            "DELETE FROM \"MESSAGE\" WHERE \"%s\"=? RETURNING \"%s\",\"%s\",\"%s\",\"%s\",\"%s\";",
            TO_COLUMN, FROM_COLUMN, TO_COLUMN, TIME_COLUMN, PAYLOAD_COLUMN,
            TYPE_COLUMN);
  }

  /*
   * (non-Javadoc)
   * 
   * @see resp.Response#formatSQLQuery(java.sql.PreparedStatement)
   */
  @Override
  public void formatSQLQuery(PreparedStatement prepared) throws SQLException {
    int i = 1;
    prepared.setInt(i++, to);
  }

  /*
   * (non-Javadoc)
   * 
   * @see resp.Response#setResult(java.sql.ResultSet)
   */
  @Override
  public void setResult(ResultSet result) {
    rs = result;
    return;
  }

  /**
   * Returns the list of messages obtained from a previous call to
   * {@link db.DBInterface#query() query}, should not be used on its own, to get
   * the messages of a user use {@link db.DBInterface#getMessages(int)
   * getMessages}.
   * 
   * @return The list of messages for the user.
   * @throws SQLException
   *           Thrown when an error occurs with the database interaction.
   */
  public List<ChatMessage> getMessages() throws SQLException {
    List<ChatMessage> messages = new ArrayList<>();
    if (rs == null || !rs.next()) {
      return null;
    }
    do {
      messages.add(new ChatMessage(rs.getString(TYPE_COLUMN), Arrays.asList(rs
          .getInt(TO_COLUMN)), rs.getInt(FROM_COLUMN), timestamp, true, rs
          .getString(PAYLOAD_COLUMN)));

    } while (rs.next());
    return messages;
  }
}
